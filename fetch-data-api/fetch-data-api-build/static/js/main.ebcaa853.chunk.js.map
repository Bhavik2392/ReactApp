{"version":3,"sources":["component/Titles.js","component/Form.js","component/Restaurant.js","App.js","AppTest.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getRestaurant","type","name","placeholder","Restaurant","id","is","src","image_url","alt","address","price","city","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","api_call","data","list","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","restaurants","map","pic","component_Restaurant","key","error","setState","stop","_x","apply","arguments","state","undefined","component_Titles","component_Form","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ebcaa853.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n    //Display TiTles for the application(Left Side of Container)\r\n    <div>\r\n        <h1 className=\"title-container__title\">Restaurant Finder</h1>\r\n        <h3 className=\"title-container__subtitle\">Find out Restaurant, by city</h3>\r\n    </div>\r\n);\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nconst Form = props => (\r\n  // Display form data ( Right side)\r\n  <div>\r\n    <form onSubmit={props.getRestaurant}>\r\n      <input type=\"text\" name=\"city\" placeholder=\"Enter City...\" />\r\n      <button>Get Restarant</button>\r\n    </form>\r\n  </div>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nconst Restaurant = props => (\r\n  //Displaying Restuarant detail \r\n  <section id={props.is}>\r\n    <div className=\"media\">\r\n      <img className=\"mr-3\" src={props.image_url} alt={props.name} />\r\n      <div className=\"media-body\">\r\n        <h5 className=\"mt-0\">{props.name}</h5>\r\n\r\n        <span>Address: {props.address}</span>\r\n        <br />\r\n        <span>Price: {props.price}</span>\r\n        <br />\r\n        <span>City: {props.city}</span>\r\n      </div>\r\n    </div>{\" \"}\r\n  </section>\r\n);\r\n\r\nexport default Restaurant;\r\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Titles from \"./component/Titles\";\nimport Form from \"./component/Form\";\nimport Restaurant from  \"./component/Restaurant\";\n\n//Main APP Component\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      list: [],\n      error: undefined\n    };\n  }\n\n  //Fetching restaurant data from the API Link\n  getRestaurant = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n\n    const api_call = await fetch(\n      `http://opentable.herokuapp.com/api/restaurants?city=${city}`\n    );\n    const data = await api_call.json();\n\n    if (city) {\n      let list = data.restaurants.map(pic => {\n        return ( \n          /* Calling Restaurant Component till last data        */\n          <Restaurant\n            key={pic.id}\n            image_url={pic.image_url}\n            name={pic.name}\n            address={pic.address}\n            price={pic.price}\n            city={pic.city}\n            error={pic.error}\n          />\n        );\n      });\n      /* setting new data to state */\n      this.setState({ list: list });\n    } else {\n      this.setState({\n        list: [],\n        error: \"Please Enter the Value\"\n      });\n    }\n  };\n\n  //Rendering All component Data(FORm, Restaurant, Titles)\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-5 title-container\">\n                  <Titles />\n                </div>\n\n                <div className=\"col-7 form-container\">\n              \n                  <Form getRestaurant={this.getRestaurant} />\n\n                  <div className=\"scrolling-box\">{this.state.list}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Titles from \"./component/Titles\";\r\nimport Form from \"./component/Form\";\r\nimport Weather from \"./component/Restaurant\";\r\n\r\n//const API_KEY = \"dddddddddd\"\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      list: [],\r\n      error: undefined\r\n    };\r\n  }\r\n\r\n  getRestaurant = async e => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n\r\n    const api_call = await fetch(\r\n      `http://opentable.herokuapp.com/api/restaurants?city=${city}`\r\n    );\r\n    const data = await api_call.json();\r\n\r\n    if (city) {\r\n      let list = data.restaurants.map(pic => {\r\n        return (\r\n          <Weather\r\n            key={pic.id}\r\n            name={pic.name}\r\n            address={pic.address}\r\n            price={pic.price}\r\n            city={pic.city}\r\n            error={pic.error}\r\n          />\r\n        );\r\n      });\r\n      this.setState({ list: list });\r\n    } else {\r\n      this.setState({\r\n        list: [],\r\n        error: \"Please Enter the Value\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-5 title-container\">\r\n                  <Titles />\r\n                </div>\r\n\r\n                <div className=\"col-7 form-container\">\r\n                  <Form getRestaurant={this.getRestaurant} />\r\n                  <table className=\"table\">\r\n                    <thead className=\"thead-dark\">\r\n                      <tr>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Address</th>\r\n                        <th scope=\"col\">Price</th>\r\n                        <th scope=\"col\">City</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody className=\"scrolling-box\">{this.state.list}</tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\"\nimport './index.css';\nimport App from './App';\nimport AppTest from './AppTest';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}